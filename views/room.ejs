<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>PeerView</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        :root {
            --primary-color: #6366f1;
            --secondary-color: #4f46e5;
            
        }
        
        body {
            background: #bcc3ca;
            min-height: 100vh;
            padding: 1rem 0;
        }
        
        .room-container {
            background: #bcc3ca;
            border-radius: 1rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            padding: 1.5rem;
        }

        .room-id {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .room-id h1 {
            font-weight: 1000;
            letter-spacing: -0.025em;
            color: var(--primary-color);
         
           
            font-size: 2rem;
        }

        .webcam-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            height: 70vh;
        }

        .webcam {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 1rem;
            background: #000;
        }

        .button-container {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 1rem;
            padding: 1rem;
        }

        #startbutton, #endbutton {
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            font-weight: 600;
            transition: all 0.3s ease;
            border: none;
            color: white;
            cursor: pointer;
        }

        #startbutton {
            background:var(--primary-color) 
        }

        #startbutton:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

        #endbutton {
            background: #dc3545;
        }

        #endbutton:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }
          
     
    </style>
</head>
<body>
    <div class="container">
        <div class="room-container">
            <div class="room-id">
                <h1>ROOM CODE: <%= roomId %></h1>
            </div>

            <div class="webcam-container">
                <video class="webcam" id="person1" autoplay muted></video>
                <video class="webcam" id="person2" autoplay></video>
            </div>

            <div class="button-container">
                <button id="startbutton">Start Webcam</button>
                <button id="endbutton">End Webcam</button>
            </div>
        </div>
    </div>
  <script>
    const startbutton = document.getElementById("startbutton");
    const endbutton = document.getElementById("endbutton");
    const roomId = "<%= roomId %>";
    let currentOffset = null;
    
    const configuration = {
      iceServers: [{   urls: [ "stun:us-turn2.xirsys.com" ]},
       {   username: "f3kG-pUgEMDq9-5rp1Y_PtwUm0DVyMJbR0Mrage8U7dohGZ2lPw7m0CQY2g_xiMsAAAAAGehf69lcmljY2MxMDI5MQ==", 
         credential: "5503a4a0-e2a2-11ef-b787-0242ac140004",   
       urls: [       "turn:us-turn2.xirsys.com:80?transport=udp", 
             "turn:us-turn2.xirsys.com:3478?transport=udp",   
           "turn:us-turn2.xirsys.com:80?transport=tcp",    
          "turn:us-turn2.xirsys.com:3478?transport=tcp", 
             "turns:us-turn2.xirsys.com:443?transport=tcp",
             "turns:us-turn2.xirsys.com:5349?transport=tcp"   ]}]
    };

   
    
    let pc;
   
    const constraints = { audio: true, video: true };
    const selfVideo = document.getElementById("person1");
    const remoteVideo = document.getElementById("person2");

    const socket = io({
      transports: ['websocket'],
      upgrade: false
    });

    socket.on('ice-candidate', async ({ candidate }) => {
      try {
        await pc.addIceCandidate(new RTCIceCandidate(candidate));
        console.log("new ice candidate added");
      } catch (e) {
        console.error('Error adding received ICE candidate', e);
      }
    });

    function initializePeerConnection() {
      pc = new RTCPeerConnection(configuration);
      pc.onicecandidate = ({ candidate }) => {
        if (candidate && pc.signalingState === "stable") {
          socket.emit("ice-candidate", { candidate, roomId });
        }
      };
      
      
      pc.ontrack = ({ streams: [stream] }) => {
        console.log(" pc.ontrack ran inside initializepeerconnection");
        console.log("Got remote track, stream ID:", stream.id);
        console.log("Remote video current src:", remoteVideo.srcObject?.id);
        remoteVideo.srcObject = stream;
        console.log("Remote video new src:", remoteVideo.srcObject?.id);
    };

     
   

      pc.onconnectionstatechange = () => {
        const state = pc.connectionState;
        console.log("Connection state changed:", state);
        
        if (state === "disconnected" || state === "failed") {
          console.log("Connection lost to peer");
          pc.close();
          setTimeout(() => {
            initializePeerConnection();
          }, 1000);
        }
      };

      return pc;
    }

    pc = initializePeerConnection();
    
   
    
    let makingOffer = false;
    let polite = false;
    let haspeer = false;

 

    async function joinRoom() {
     cleanupWebRTC();
      pc = initializePeerConnection();
      haspeer = false;  // Reset peer state
      polite = false;   // Reset politeness
      makingOffer = false; // Reset offer state
      socket.emit("join-room", roomId);
    }

    socket.on('initiate-reconnect', () => {
      polite = true;
      console.log('Initiating reconnection process');
      if (stream) {
        stream.getTracks().forEach(track => pc.addTrack(track, stream));
      }
    });

    socket.on("haspeer", async () => {
      
      const delay = window.location.hostname === 'localhost' ? 0 : 1000;
      
      setTimeout(async () => {
        haspeer = true;
        
        if (pc.signalingState === "stable" || pc.signalingState === "have-local-offer") {
          stream.getTracks().forEach(track => pc.addTrack(track, stream));
        }
        
          if (!polite) { // Only User 1 (impolite) sends the offer
            try {
              const offer = await pc.createOffer();
              await pc.setLocalDescription(offer);
              socket.emit("offer", { description: pc.localDescription }, roomId);
              console.log("Delayed offer sent after haspeer");
            } catch (err) {
              console.error("Delayed offer error:", err);
            }
          
        }
      }, delay);
    });

    socket.on("ispolite", () => {
      polite = true;
    });

    // Call joinRoom instead of direct socket.emit
    joinRoom();

    pc.onnegotiationneeded = async () => {
      if (!haspeer) {
        console.log("No peer yet, skipping negotiation");
        return;
      }
      try {
        makingOffer = true;
        await pc.setLocalDescription();
        socket.emit("offer", { description: pc.localDescription }, roomId);
        console.log("offer sent");
      } catch (err) {
        console.error(err);
      } finally {
        makingOffer = false;
      }
    };

    let ignoreOffer = false;

    socket.on("offer", async ({ description }) => {
      console.log("offer socket ran~~~~~~~");
      try {
        if (description) {
          const offerCollision =
            description.type === "offer" &&
            (makingOffer || pc.signalingState !== "stable");

          ignoreOffer = !polite && offerCollision;
          if (ignoreOffer) {
            return;
          }

          await pc.setRemoteDescription(description);
          console.log("offer received!, set offer to remotedescription");
          
          if (description.type === "offer") {
            await pc.setLocalDescription();
            console.log("setlocaldescription from offer socket");
            socket.emit("answer", { description: pc.localDescription }, roomId);
            console.log("answer emitted");
          }
        }
      } catch (err) {
        console.error(err);
      }
    });

    socket.on('answer', async ({ description }) => {
      try {
        await pc.setRemoteDescription(new RTCSessionDescription(description));
        console.log("OFFERER SET REMOTE DESCRIPTION FROM ANSWER");
      } catch (e) {
        console.error('Error handling answer', e);
      }
    });

    function cleanupWebRTC() {
     
      
      if (remoteVideo.srcObject) {
          const tracks = remoteVideo.srcObject.getTracks();
          tracks.forEach(track => track.stop());
          remoteVideo.srcObject = null;
      }
      
      if (selfVideo.srcObject) {
          const tracks = selfVideo.srcObject.getTracks();
          tracks.forEach(track => track.stop());
          selfVideo.srcObject = null;
      }
  
  }


    socket.on('peer-disconnected', () => {
      cleanupWebRTC();
      // Clean up video stream if it exists
      // Show alert and redirect
      socket.emit('manual-disconnect');
      alert("The other participant has disconnected. You will be redirected to the home page.");
      window.location.href = '/';
  });


    
    endbutton.addEventListener("click", async () => {
      if (stream) {
        stream.getTracks().forEach(track => {
          track.stop();
        });
      }
    });
      
    startbutton.addEventListener("click", async () => {
      try {
        stream = await navigator.mediaDevices.getUserMedia(constraints);
        console.log("Got local stream, ID:", stream.id);
        console.log("Local stream has tracks:", stream.getTracks().map(t => t.kind));
        selfVideo.srcObject = stream;
        if (haspeer) {
          console.log("Adding tracks to peer, current connection state:", pc.connectionState);
          stream.getTracks().forEach(track => pc.addTrack(track, stream));
        }
      } catch (err) {
        console.error(err);
      }
    });
  </script>
</body>
</html>