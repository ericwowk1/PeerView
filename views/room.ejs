<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>PeerView</title>
  <link rel="stylesheet" href="/room.css">
  <script src="/socket.io/socket.io.js"></script>
</head>
<body>
  <div class="roomID">
    <h1>YOUR ROOM ID IS <%= roomId %></h1>
  </div>

  <div class="webcam-container">
    <div class="localwebcam">
      <video class="webcam" id="person1" autoplay muted></video>
      <div class="webcam-buttons">
        <button id="startbutton">Start Webcam</button>
        <button id="endbutton">End Webcam</button>
      </div>
    </div>
    <video class="webcam" id="person2" autoplay></video>
  </div>

  <script>
    const startbutton = document.getElementById("startbutton");
    const endbutton = document.getElementById("endbutton");
    const roomId = "<%= roomId %>";
    let currentOffset = null;
    
    const configuration = {
      iceServers: [
        { urls: "stun:stun.l.google.com:19302" },
        { 
          urls: "turn:turn.bistri.com:80",
          username: "homeo",
          credential: "homeo"
        }
      ]
    };

   
    
    let pc;
    let stream = null;
    const constraints = { audio: true, video: true };
    const selfVideo = document.getElementById("person1");
    const remoteVideo = document.getElementById("person2");

    const socket = io({
      transports: ['websocket'],
      upgrade: false
    });

    socket.on('ice-candidate', async ({ candidate }) => {
      try {
        await pc.addIceCandidate(new RTCIceCandidate(candidate));
        console.log("new ice candidate added");
      } catch (e) {
        console.error('Error adding received ICE candidate', e);
      }
    });

    function initializePeerConnection() {
      pc = new RTCPeerConnection(configuration);
      pc.onicecandidate = ({ candidate }) => {
        if (candidate) {
          socket.emit('ice-candidate', {
            candidate: candidate,
            roomId: roomId
          });
        }
      };
      
      pc.ontrack = ({ streams: [stream] }) => {
        console.log(" pc.ontrack ran inside initializepeerconnection");
        console.log("Got remote track, stream ID:", stream.id);
        console.log("Remote video current src:", remoteVideo.srcObject?.id);
        remoteVideo.srcObject = stream;
        console.log("Remote video new src:", remoteVideo.srcObject?.id);
    };

     
   

      pc.onconnectionstatechange = () => {
        const state = pc.connectionState;
        console.log("Connection state changed:", state);
        
        if (state === "disconnected" || state === "failed") {
          console.log("Connection lost to peer");
          pc.close();
          setTimeout(() => {
            initializePeerConnection();
          }, 1000);
        }
      };

      return pc;
    }

    pc = initializePeerConnection();
    
   
    
    let makingOffer = false;
    let polite = false;
    let haspeer = false;

    async function getOffset() {
      return new Promise((resolve) => {
        socket.emit("request-offset", roomId, (offset) => {
          currentOffset = offset;
          resolve(offset);
        });
      });
    }

    async function joinRoom() {
      const offset = await getOffset();
      socket.emit("join-room", roomId, offset);
    }

    socket.on('initiate-reconnect', () => {
      polite = true;
      console.log('Initiating reconnection process');
      if (stream) {
        stream.getTracks().forEach(track => pc.addTrack(track, stream));
      }
    });

    socket.on("haspeer", async () => {
      //  add 500ms delay in production only
      const delay = window.location.hostname === 'localhost' ? 0 : 1000;
      
      setTimeout(async () => {
        haspeer = true;
        
        if (stream) {
          stream.getTracks().forEach(track => pc.addTrack(track, stream));
          
          if (!polite) { // Only User 1 (impolite) sends the offer
            try {
              const offer = await pc.createOffer();
              await pc.setLocalDescription(offer);
              socket.emit("offer", { description: pc.localDescription }, roomId);
              console.log("Delayed offer sent after haspeer");
            } catch (err) {
              console.error("Delayed offer error:", err);
            }
          }
        }
      }, delay);
    });

    socket.on("ispolite", () => {
      polite = true;
    });

    // Call joinRoom instead of direct socket.emit
    joinRoom();

    pc.onnegotiationneeded = async () => {
      if (!haspeer) {
        console.log("No peer yet, skipping negotiation");
        return;
      }
      try {
        makingOffer = true;
        await pc.setLocalDescription();
        socket.emit("offer", { description: pc.localDescription }, roomId);
        console.log("offer sent");
      } catch (err) {
        console.error(err);
      } finally {
        makingOffer = false;
      }
    };

    let ignoreOffer = false;

    socket.on("offer", async ({ description }) => {
      try {
        if (description) {
          const offerCollision =
            description.type === "offer" &&
            (makingOffer || pc.signalingState !== "stable");

          ignoreOffer = !polite && offerCollision;
          if (ignoreOffer) {
            return;
          }

          await pc.setRemoteDescription(description);
          console.log("offer received!");
          
          if (description.type === "offer") {
            await pc.setLocalDescription();
            socket.emit("answer", { description: pc.localDescription }, roomId);
          }
        }
      } catch (err) {
        console.error(err);
      }
    });

    socket.on('answer', async ({ description }) => {
      try {
        await pc.setRemoteDescription(new RTCSessionDescription(description));
        console.log("OFFERER SET REMOTE DESCRIPTION FROM ANSWER");
      } catch (e) {
        console.error('Error handling answer', e);
      }
    });

    

    window.addEventListener('beforeunload', () => {
      if (currentOffset) {
        socket.emit("client-disconnect", { roomId }, currentOffset, (response) => {
          if (response.success) {
            console.log("Successfully stored disconnect state");
          }
        });
      }
    });
    
    endbutton.addEventListener("click", async () => {
      if (stream) {
        stream.getTracks().forEach(track => {
          track.stop();
        });
      }
    });
      
    startbutton.addEventListener("click", async () => {
      try {
        stream = await navigator.mediaDevices.getUserMedia(constraints);
        console.log("Got local stream, ID:", stream.id);
        console.log("Local stream has tracks:", stream.getTracks().map(t => t.kind));
        selfVideo.srcObject = stream;
        if (haspeer) {
          console.log("Adding tracks to peer, current connection state:", pc.connectionState);
          stream.getTracks().forEach(track => pc.addTrack(track, stream));
        }
      } catch (err) {
        console.error(err);
      }
    });
  </script>
</body>
</html>